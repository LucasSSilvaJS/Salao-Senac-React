import Header3 from "../../components/Header3";
import atendimentoImg from '../../assets/atendimento.png';
import { useState } from "react";
import Calendar from "react-calendar";
import { toast } from "react-toastify";
import { BsPlusSquare } from "react-icons/bs";
import { FaRegCalendarAlt } from "react-icons/fa";

function Scheduling() {
    const servicosSenac = [
        {
            categoria: "Cabelos",
            servicos: [
                "Corte (masculino, feminino e infantil)",
                "Colora√ß√£o (tintura, mechas, reflexos, ombr√© hair, luzes)",
                "Hidrata√ß√£o (simples ou profunda)",
                "Reconstru√ß√£o capilar",
                "Progressiva ou selagem t√©rmica",
                "Penteados (simples, para eventos e ocasi√µes especiais)",
                "Alisamentos (com produtos qu√≠micos ou t√©rmicos)",
                "Relaxamento ou texturiza√ß√£o",
                "Tratamentos espec√≠ficos (antiqueda, anti-frizz, entre outros)"
            ]
        },
        {
            categoria: "Est√©tica Facial",
            servicos: [
                "Limpeza de pele (b√°sica ou profunda)",
                "Hidrata√ß√£o facial",
                "Peeling facial (qu√≠mico ou mec√¢nico)",
                "Tratamentos antiacne",
                "Massagem facial relaxante",
                "Design de sobrancelhas (com pin√ßa, linha ou henna)",
                "Depila√ß√£o facial (com cera ou linha)"
            ]
        },
        {
            categoria: "Est√©tica Corporal",
            servicos: [
                "Massagens relaxantes e terap√™uticas",
                "Drenagem linf√°tica",
                "Esfolia√ß√£o corporal",
                "Tratamentos redutores de medidas",
                "Tratamentos para celulite e flacidez",
                "Banhos de ofur√¥ ou aromaterapia (em algumas unidades)"
            ]
        },
        {
            categoria: "Maquiagem",
            servicos: [
                "Maquiagem social",
                "Maquiagem para eventos (festas, formaturas, casamentos)",
                "Maquiagem art√≠stica (em unidades com cursos especializados)"
            ]
        },
        {
            categoria: "M√£os e P√©s",
            servicos: [
                "Manicure e pedicure",
                "Esmalta√ß√£o simples e decorada",
                "Spa para p√©s e m√£os (hidrata√ß√£o e esfolia√ß√£o)",
                "Aplica√ß√£o de unhas posti√ßas ou alongamento"
            ]
        },
        {
            categoria: "Depila√ß√£o",
            servicos: [
                "Depila√ß√£o corporal e facial (cera quente ou fria)",
                "Depila√ß√£o com linha"
            ]
        },
        {
            categoria: "Barbearia",
            servicos: [
                "Corte masculino",
                "Aparar e modelar barba",
                "Hidrata√ß√£o e tratamento para barba e cabelos masculinos"
            ]
        },
        {
            categoria: "Cursos e Consultorias",
            servicos: [
                "Consultorias personalizadas sobre cuidados de beleza",
                "Atendimento especializado para an√°lise capilar, de pele ou est√©tica"
            ]
        }
    ];

    const servicos = servicosSenac.map(s => s.servicos).reduce((acc, sArray) => acc.concat(...sArray), []);

    const dates = {
        '24/11/2024': 'bg-success text-white',
        '25/11/2024': 'bg-success text-white',
        '26/11/2024': 'bg-danger text-white',
        '27/11/2024': 'bg-success text-white',
    };

    const horarios = [
        "8:00 - 9:00",
        "9:00 - 10:00",
        "10:00 - 11:00",
        "11:00 - 12:00",
        "12:00 - 13:00",
        "13:00 - 14:00",
        "14:00 - 15:00",
        "15:00 - 16:00",
        "16:00 - 17:00",
        "17:00 - 18:00"
    ]

    const listaDuracao = [
        "30 minutos",
        "45 minutos",
        "60 minutos",
        "75 minutos",
        "90 minutos",
        "105 minutos",
        "120 minutos",
        "135 minutos",
        "150 minutos",
        "165 minutos"
    ]

    const profissionais = [
        "Ana (Cabelereira - Corte e Colora√ß√£o)",
        "Carlos (Barbeiro - Corte masculino e modelagem de barba)",
        "Mariana (Esteticista - Limpeza de pele e tratamentos antiacne)",
        "Jos√© (Massoterapeuta - Massagens relaxantes e terap√™uticas)",
        "L√∫cia (Manicure - Manicure, pedicure e spa para m√£os e p√©s)",
        "Fernanda (Maquiadora - Maquiagem social e art√≠stica)",
        "Rafael (Cabelereiro - Penteados e tratamentos capilares)",
        "Clara (Esteticista - Tratamentos faciais e corporais)",
        "Paulo (Barbeiro - Corte masculino e tratamentos para barba)"
    ];
    

    const [schedulePage, setSchedulePage] = useState(false);
    const [servico, setServico] = useState('');
    const [selectDate, setSelectDate] = useState(new Date());
    const [horario, setHorario] = useState('');
    const [duracao, setDuracao] = useState('');
    const [profissional, setProfissional] = useState('');
    const [observacao, setObservacao] = useState('');

    function handleSubmit(e){
        e.preventDefault();
        toast.success('Agendado com sucesso!');
        setSchedulePage(false);
    }

    return (
        <>
            <Header3 imgMenu={atendimentoImg} tituloMenu='Atendimento'>
                <div>
                    <label className="form-label text-white">Servi√ßos:</label>
                    <select value={servico} onChange={e => setServico(e.target.value)} className="form-select" style={{ backgroundColor: 'rgba(255, 255, 255, 0.5)' }}>
                        <option value="" disabled>Selecione um servi√ßo</option>
                        {servicos.map((servico, index) => (
                            <option value={servico} key={index}>{servico}</option>
                        ))}
                    </select>
                </div>
                <button className="btn btn-success bg-orange">
                    Buscar
                </button>
                <button className="btn btn-success bg-orange" onClick={() => setSchedulePage(false)}>
                    <FaRegCalendarAlt size={25} color="white"/>
                </button>
            </Header3>
            <main>
                <section className="container p-3">
                    {!schedulePage ? (
                        <>
                            <Calendar
                                className='w-100'
                                onChange={setSelectDate}
                                value={selectDate}
                                onClickDay={(value, event) => {
                                    const listDates = Object.keys(dates);
                                    const formattedDate = value.toLocaleDateString();
                                    if (listDates.includes(formattedDate)) {
                                        if (dates[formattedDate] === 'bg-success text-white') {
                                            setSchedulePage(true);
                                        } else {
                                            toast.error('N√£o h√° reserva dispon√≠vel üòî');
                                        }
                                    }
                                }}
                                tileClassName={({ date, view }) => {
                                    const formattedDate = date.toLocaleDateString();

                                    if (dates[formattedDate]) {
                                        return dates[formattedDate];
                                    }

                                    return null;
                                }}
                            />
                            <article className="mx-auto mt-2 d-flex gap-3 flex-wrap">
                                <div className="d-flex align-items-center">
                                    <div className="rounded-1 me-2" style={{width: '15px', height: '15px', backgroundColor: 'yellow'}}></div>
                                    <span>Data atual</span>
                                </div>
                                <div className="d-flex align-items-center">
                                    <div className="rounded-1 me-2" style={{width: '15px', height: '15px', backgroundColor: 'blue'}}></div>
                                    <span>Data selecionada</span>
                                </div>
                                <div className="d-flex align-items-center">
                                    <div className="rounded-1 me-2" style={{width: '15px', height: '15px', backgroundColor: 'green'}}></div>
                                    <span>Agendamento dispon√≠vel</span>
                                </div>
                                <div className="d-flex align-items-center">
                                    <div className="rounded-1 me-2" style={{width: '15px', height: '15px', backgroundColor: 'red'}}></div>
                                    <span>Agendamento indispon√≠vel</span>
                                </div>
                            </article>
                        </>
                    ) : (
                        <>
                            <header className="w-100 d-flex align-items-center p-2 mb-2" style={{ color: 'var(--color-navy-blue)', borderBottom: '2px solid var(--color-navy-blue)' }}>
                                <BsPlusSquare size={30} className="me-2" />
                                <h2 className="h4">Agendamento</h2>
                            </header>
                            <form className="row" onSubmit={handleSubmit}>
                                <div className="col-12 col-md-4 mb-2" style={{ color: 'var(--color-navy-blue)' }}>
                                    <label className="form-label mb-1">Dia</label>
                                    <input type="date" className="form-control" disabled value={selectDate.toISOString().split('T')[0]} />
                                </div>
                                <div className="col-12 col-md-4 mb-2" style={{ color: 'var(--color-navy-blue)' }}>
                                    <label className="form-label mb-1">Horario</label>
                                    <select className="form-select" value={horario} onChange={e => setHorario(e.target.value)}>
                                        <option value="" disabled>Selecione um hor√°rio</option>
                                        {horarios.map((hr, index) => (
                                            <option value={hr} key={index}>{hr}</option>
                                        ))}
                                    </select>
                                </div>
                                <div className="col-12 col-md-4 mb-2" style={{ color: 'var(--color-navy-blue)' }}>
                                    <label className="form-label mb-1">Dura√ß√£o</label>
                                    <select className="form-select" value={duracao} onChange={e => setDuracao(e.target.value)}>
                                        <option value="" disabled>Selecione o tempo estimado</option>
                                        {listaDuracao.map((d, index) => (
                                            <option value={d} key={index}>{d}</option>
                                        ))}
                                    </select>
                                </div>
                                <div className="col-md-6 col-12 mb-2" style={{ color: 'var(--color-navy-blue)' }}>
                                    <label className="form-label mb-1">Servi√ßo</label>
                                    <select className="form-select" value={servico} onChange={e => setServico(e.target.value)}>
                                        <option value="" disabled>Selecione o tempo estimado</option>
                                        {servicos.map((s, index) => (
                                            <option value={s} key={index}>{s}</option>
                                        ))}
                                    </select>
                                </div>
                                <div className="col-md-6 col-12 mb-2" style={{ color: 'var(--color-navy-blue)' }}>
                                    <label className="form-label mb-1">Profissional</label>
                                    <select className="form-select" value={profissional} onChange={e => setProfissional(e.target.value)}>
                                        <option value="" disabled>Selecione um profissional</option>
                                        {profissionais.map((p, index) => (
                                            <option value={p} key={index}>{p}</option>
                                        ))}
                                    </select>
                                </div>
                                <div className="col-12 mb-4" style={{ color: 'var(--color-navy-blue)' }}>
                                    <label className="form-label mb-1">Observa√ß√£o</label>
                                    <input type="text" className="form-control" value={observacao} onChange={e => setObservacao(e.target.value)} placeholder="Fa√ßa um coment√°rio"/>
                                </div>
                                <input type="submit" className="col-12 btn btn-success"/>
                            </form>
                        </>
                    )}
                </section>
            </main>
        </>
    );
}

export default Scheduling;